[build-system]
# requires = ["setuptools"]
# build-backend = "setuptools.build_meta"
requires = ["hatchling >= 1.26"]
build-backend = "hatchling.build"

[project]
name='sandbox'
description='Run DeepVariant on a cohort of samples using cpg-flow'
readme = "README.md"
# currently cpg-flow is pinned to this version
requires-python = ">=3.10,<3.11"
version="0.1.4"
license={ "file" = "LICENSE" }
classifiers=[
    'Environment :: Console',
    'Intended Audience :: Science/Research',
    'License :: OSI Approved :: MIT License',
    'Natural Language :: English',
    'Operating System :: Unix',
    'Programming Language :: Python',
    'Topic :: Scientific/Engineering :: Bio-Informatics',
]

dependencies=[
    'cpg-flow>=v0.2.2',
]

[project.urls]
Repository = "https://github.com/populationgenomics/pa-sandbox"

[project.optional-dependencies]
# various requirements when running cpg-flow/analysis-runner
cpg = [
    'cpg-flow>=v0.2.2',
]
test = [
    'bump2version',
    'pre-commit',
    'pytest',
]

[project.scripts]
# the workflow runner script - entrypoint for the pipeline
sandbox = 'sandbox.run_workflow:cli_main'

[tool.hatch.build.targets.wheel]
# package-dir = {"" = "src"}
packages = ["src/sandbox"]

[tool.hatch.build.targets.wheel.sources]
"src" = ""

[tool.black]
line-length = 120
skip-string-normalization = true
exclude = '''
/(
  venv
  | \.mypy_cache
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
ignore_missing_imports = true
exclude = '^gnomad_methods/'

[[tool.mypy.overrides]]
module = "gnomad_methods.*"
ignore_errors = true

[tool.pytest.ini_options]
testpaths = ['test']

[tool.ruff]
line-length = 120
extend-exclude = ["venv", ".mypy_cache", ".venv", "build", "dist"]

[tool.ruff.format]
indent-style = 'space'
quote-style = "single"

[tool.ruff.lint]
# ignore pydocstyle, flake8-boolean-trap (FBT)
select = ["A", "B", "C", "E", "F", "G", "I", "N", "Q", "S", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "ERA", "EXE", "ICN", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "UP", "YTT"]

fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "ERA", "EXE", "FBT", "ICN", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "UP", "YTT"]

ignore = [
    "ANN001", # Missing type annotation for function argument
    "ANN101", # Missing type annotation for self in method
    "ANN102", # Missing type annotation for `cls` in classmethod
    "ANN201", # Missing return type annotation for public function
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    "ANN204", # Missing type annotation for special method `__init__`
    "COM812", # Trailing comma prohibited
    "E731", # Do not assign a lambda expression, use a def
    "G004", # Logging statement uses f-string
    "PLW0603", # Using the global statement to update `<VAR>` is discouraged
    "Q000", # Single quotes found but double quotes preferred
    "S101", # Use of assert detected
    "PLR0912", # Too many branches (> 12)
    "PLR0913", # Too many arguments in function (> 5)
    "C901", # method is too complex (> 10 conditions)
    "N999", # invalid module name (not lower-case and potholes)
    "I001", # Import block is un-sorted or un-formatted (to remove soon)
]

[tool.ruff.lint.isort]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.bumpversion]
current_version = "0.1.4"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
allow_dirty = false

tag = true
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
sign_tags = true

commit = true
message = "Bump version: {current_version} → {new_version}"
commit_args = ""

[[tool.bumpversion.files]]
filename = "Dockerfile"
search = "ENV VERSION={current_version}"
replace = "ENV VERSION={new_version}"

# [[tool.bumpversion.files]]
# filename = "config/sandbox_defaults.toml"
# regex = true
# parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)-.*"
# search = "sandbox:{current_version}"
# replace = "sandbox:{new_version}"

# [[tool.bumpversion.files]]
# filename = "README.md"
# search = "{current_version}"
# replace = "{new_version}"
