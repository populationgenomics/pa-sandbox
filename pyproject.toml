[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
# TODO(you): update this to reflect the project's name & description
name='workflow_name'
description='Template workflow'
readme = "README.md"
# currently cpg-flow is pinned to this version
requires-python = ">=3.10,<3.11"
version='0.1.0'
license={ "file" = "LICENSE" }
classifiers=[
    'Environment :: Console',
    'Intended Audience :: Science/Research',
    'License :: OSI Approved :: MIT License',
    'Natural Language :: English',
    'Operating System :: Unix',
    'Programming Language :: Python',
    'Topic :: Scientific/Engineering :: Bio-Informatics',
]

dependencies=[
    'cpg-flow>=v0.1.2',
]

[project.urls]
# TODO(you): update this to reflect the project's official homepage
Repository = "https://github.com/populationgenomics/workflow_name"

[project.optional-dependencies]
# various requirements when running cpg-flow/analysis-runner
cpg = [
    'cpg-flow>=v0.1.2',
]
test = [
    'bump2version',
    'pre-commit',
    'pytest',
]

[project.scripts]
# home for any scripts which will be installed
# e.g. this minimal "Hello, World!" script which can be run by alias when this package is installed
# $ say_hello
# >> Hello, World!
# $ say_hello cpg-flow
# >> Hello, cpg-flow!
say_hello = 'workflow_name.scripts.hello_world:cli_main'

# the workflow runner script - entrypoint for the pipeline
run_workflow = 'workflow_name.run_workflow:cli_main'

[tool.setuptools]
package-dir = {"" = "src"}

[options]
include_package_data = true

[options.package_data]
'workflow_name'=  ['config_template.toml']

[tool.black]
line-length = 120
skip-string-normalization = true
exclude = '''
/(
  venv
  | \.mypy_cache
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ['test']

[tool.ruff]
line-length = 120
extend-exclude = ["venv", ".mypy_cache", ".venv", "build", "dist"]

[tool.ruff.format]
indent-style = 'space'
quote-style = "single"

[tool.ruff.lint]
# ignore pydocstyle, flake8-boolean-trap (FBT)
select = ["A", "B", "C", "E", "F", "G", "I", "N", "Q", "S", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "ERA", "EXE", "ICN", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "UP", "YTT"]

fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "ERA", "EXE", "FBT", "ICN", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "UP", "YTT"]

ignore = [
    "ANN001", # Missing type annotation for function argument
    "ANN101", # Missing type annotation for self in method
    "ANN102", # Missing type annotation for `cls` in classmethod
    "ANN201", # Missing return type annotation for public function
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    "ANN204", # Missing type annotation for special method `__init__`
    "COM812", # Trailing comma prohibited
    "E731", # Do not assign a lambda expression, use a def
    "G004", # Logging statement uses f-string
    "PLW0603", # Using the global statement to update `<VAR>` is discouraged
    "Q000", # Single quotes found but double quotes preferred
    "S101", # Use of assert detected
    "PLR0912", # Too many branches (> 12)
    "PLR0913", # Too many arguments in function (> 5)
    "C901", # method is too complex (> 10 conditions)
    "N999", # invalid module name (not lower-case and potholes)
    "I001", # Import block is un-sorted or un-formatted (to remove soon)
]

[tool.ruff.lint.isort]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
